{\rtf1\ansi\ansicpg932\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset128 HiraginoSans-W6;\f1\fnil\fcharset128 HiraginoSans-W4;\f2\fnil\fcharset128 HiraginoSans-W3;
\f3\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red230\green230\blue230;\red230\green230\blue230;}
{\*\expandedcolortbl;;\csgray\c92143;\csgray\c92143;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19860\viewh14580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs44 \cf0 async await in swift 6
\f1\b0\fs24 \
\

\f0\b \'8a\'54\'97\'76
\f1\b0 \
	\'82\'b1\'82\'ea\'81\'42\
		{\field{\*\fldinst{HYPERLINK "https://speakerdeck.com/koher/await"}}{\fldrslt https://speakerdeck.com/koher/await}}\
	\
\
\'88\'c8\'89\'ba\'8f\'91\'82\'ab\'89\'ba\'82\'b5\'81\'42\
\
\'8d\'a1\'94\'4e\'82\'cc\'8f\'48\'82\'c9\'82\'cd\'83\'8a\'83\'8a\'81\'5b\'83\'58\'82\'b3\'82\'ea\'82\'bb\'82\'a4\'82\'c6\'82\'cc\'82\'b1\'82\'c6\'81\'42\
\
\
\'83\'52\'81\'5b\'83\'8b\'83\'6f\'83\'62\'83\'4e\'8a\'d6\'90\'94\'82\'aaasync/await\'82\'aa\'93\'fc\'82\'e9\'82\'c6\'82\'b1\'82\'a4\'82\'c8\'82\'e9\'82\'e6\'82\'c6\'81\'42\
\cb2 func download(from url: URL, completion: @escaping (Data) -> Void)\
\
download(from: url) \{ data in \
	// trailing closure\'82\'c1\'82\'c4\'82\'a2\'82\'a4\'96\'bc\'91\'4f\'82\'be\'82\'c1\'82\'bd\'82\'f1\'82\'be\'82\'c8\'82\'b1\'82\'ea\
\}\
\cb1 \
\
\cb2 func download(from url: URL) async -> Data\
\
let data = await donwload(from: url)\
// \'82\'b1\'82\'b1\'82\'c5\'94\'f1\'93\'af\'8a\'fa\'82\'f0\'8e\'f3\'82\'af\'8e\'e6\'82\'ea\'82\'e9\
\cb1 \
\
try\'82\'c6throws\'82\'cc\'8a\'d6\'8c\'57\'82\'c9\'82\'c9\'82\'c4\'82\'a2\'82\'e9\'82\'cb\'81\'5b\'82\'c1\'82\'c4\'82\'a2\'82\'a4\'81\'42\
\cb2 func foo() throws \{\}\
\
func bar() \{\
	try foo() // \'82\'b1\'82\'ea\'82\'cd\'82\'a8\'82\'b1\'82\'e7\'82\'ea\'82\'e9\'81\'41\'8c\'9f\'8d\'b8\'97\'e1\'8a\'4f\'82\'c8\'82\'cc\'82\'a9\'82\'c8\
\}\
\cb1 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Potential Suspension Point(\'82\'c1\'82\'c4\'89\'bd -> \'83\'58\'83\'8c\'83\'62\'83\'68\'82\'aa\'90\'e8\'97\'4c\'82\'b3\'82\'ea\'82\'bd\'8f\'f3\'91\'d4\'82\'aa\'89\'f0\'95\'fa\'82\'b3\'82\'ea\'82\'e9\'89\'c2\'94\'5c\'90\'ab\'82\'aa\'82\'a0\'82\'e9\'83\'7c\'83\'43\'83\'93\'83\'67\
\

\f2 \cb2 func donwload(from url: URL) async -> Data\
\
func downloadImage(from url: URL) async -> UIImage \{\
	// 
\f0\b Potential Suspension Point
\f2\b0 \
	let data = await download(from: url)// \'83\'58\'83\'8c\'83\'62\'83\'68\'82\'aa\'90\'e8\'97\'4c\'82\'b3\'82\'ea\'82\'bd\'8f\'f3\'91\'d4\'82\'aa\'89\'f0\'95\'fa\'82\'b3\'82\'ea\'82\'e9\'89\'c2\'94\'5c\'90\'ab\'82\'aa\'82\'a0\'82\'e9\'83\'7c\'83\'43\'83\'93\'83\'67\'81\'41\'82\'c8\'82\'e9\'82\'d9\'82\'c7\
	\
	// \'82\'b1\'82\'b1\'82\'a9\'82\'e7\'90\'e6\'82\'cd\'82\'ba\'82\'f1\'82\'ba\'82\'f1\'95\'ca\'82\'cc\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'c5\'8e\'c0\'8d\'73\'82\'b3\'82\'ea\'82\'e9\'89\'c2\'94\'5c\'90\'ab\'82\'aa\'82\'a0\'82\'e9\
	let image = UIImage(data: data)!\
	return image\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf0 \cb1 \
 UI\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'d6\'82\'c6\'94\'bd\'89\'66\'82\'b3\'82\'b9\'82\'e9\'82\'c9\'82\'cd\'95\'ca\'82\'cc\'8e\'e8\'96\'40\'82\'f0\'91\'67\'82\'dd\'8d\'87\'82\'ed\'82\'b9\'82\'e9\'82\'f1\'82\'be\'82\'eb\'82\'a4\'82\'c8\'81\'41GCD\'82\'a9\'82\'c8\'81\'42\'8d\'a1\'82\'dc\'82\'c5\'82\'c5\'82\'ab\'82\'c4\'82\'bd\'82\'b1\'82\'c6\'82\'be\'82\'b5\'81\'42\
\
\

\f0\b Promise\'82\'e2Future\'82\'f0\'95\'d4\'82\'b3\'82\'c8\'82\'a2\'82\'cc\'82\'a9\'81\'48
\f1\b0 \
	\'8f\'6f\'82\'c4\'82\'b1\'82\'c8\'82\'a2\'81\'42\
	\'88\'ea\'94\'d4\'8b\'df\'82\'a2\'82\'cc\'82\'cdKotlin\'82\'ccSuspendFunc// \'82\'b1\'82\'ea\'82\'cd\'82\'bf\'82\'e5\'82\'c1\'82\'c6\'8b\'43\'82\'c9\'82\'c8\'82\'e9\
\
	async\'82\'c6await\'82\'cd\'95\'ca\'82\'cc\'8c\'5e\'82\'f0\'95\'d4\'82\'b5\'82\'c4\'82\'a2\'82\'e9\'81\'42\
\cb2 func foo() \{\
    var a:() async -> Int = \{42\}\
    var b:() -> Int = \{42\}\
    a = b// \'82\'b1\'82\'ea\'82\'cd\'83\'52\'83\'93\'83\'70\'83\'43\'83\'8b\'92\'ca\'82\'e9\'82\'aa\'81\'41\'8b\'74\'82\'cd\'96\'b3\'97\'9d\
    \
    var c = await a()\
    print(c)\
\}\
\cb1 \
	// \'82\'a2\'82\'a2\'82\'c8\'81\'60\'81\'60\'81\'60\'82\'b1\'82\'ea\'81\'60\'81\'60\'81\'60\'82\'b1\'82\'eaUnity\'82\'c5\'82\'e0\'82\'e2\'82\'e8\'82\'bd\'82\'a2\'82\'c8\'81\'60\'81\'60\'81\'60\'81\'42\
\
	\'93\'af\'8a\'fa\'8a\'d6\'90\'94\'82\'cd\'94\'f1\'93\'af\'8a\'fa\'82\'cc\'83\'54\'83\'75\'83\'5e\'83\'43\'83\'76\'81\'41\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'8a\'d6\'8c\'57\'82\'aa\'82\'a0\'82\'e9\'81\'42\
\
\
\'83\'52\'81\'5b\'83\'8b\'83\'6f\'83\'62\'83\'4e\'94\'c5\
\cb2 // \'83\'54\'81\'5b\'83\'6f\'81\'5b\'82\'a9\'82\'e7 JSON \'82\'f0\'8e\'e6\'93\'be\'82\'b5\'81\'41\
// User \'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'83\'66\'83\'52\'81\'5b\'83\'68\'82\'b7\'82\'e9\
// \'94\'f1\'93\'af\'8a\'fa\'8a\'d6\'90\'94 fetchUser \'82\'f0\'8a\'ae\'90\'ac\'82\'b3\'82\'b9\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
//\
// \'83\'54\'81\'5b\'83\'6f\'81\'5b\'82\'a9\'82\'e7 JSON \'82\'f0\'8e\'e6\'93\'be\'82\'b7\'82\'e9\'82\'c9\'82\'cd\
// download \'8a\'d6\'90\'94\'82\'f0\'97\'70\'82\'a2\'82\'dc\'82\'b7\'81\'42\
// download \'82\'cc\'8e\'c0\'91\'95\'82\'cd\'8b\'5b\'8e\'97\'93\'49\'82\'c8\'82\'e0\'82\'cc\'82\'c5\'82\'b7\'82\'aa\
// \'95\'cf\'8d\'58\'82\'b9\'82\'b8\'82\'c9\'82\'bb\'82\'cc\'82\'dc\'82\'dc\'97\'98\'97\'70\'82\'b5\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
//\
// \'82\'c8\'82\'a8\'81\'41\'92\'ca\'90\'4d\'82\'e2\'83\'66\'83\'52\'81\'5b\'83\'68\'82\'c9\'8b\'4e\'88\'f6\'82\'b7\'82\'e9\'83\'47\'83\'89\'81\'5b\'82\'cd\
// \'8b\'4e\'82\'b1\'82\'e7\'82\'c8\'82\'a2\'82\'e0\'82\'cc\'82\'c6\'82\'b5\'82\'dc\'82\'b7\'81\'42\
\
import Foundation\
import FoundationNetworking\
\
struct User: Identifiable, Codable \{\
    typealias ID = Int\
    let id: ID\
    var name: String\
    var thumbnailURL: URL\
\}\
func download(from url: URL, completion: @escaping (Data) -> Void) \{\
    let data: Data = try! Data(contentsOf: url)\
    completion(data)\
\}\
\
func fetchUser(for id: User.ID, completion: @escaping (User) -> Void) \{\
    let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/user?id=\\(id.description)")!\
    // 
\f3 \uc0\u55357 \u56999 
\f1  \'82\'b1\'82\'b1\'82\'f0\'8e\'c0\'91\'95\'82\'b7\'82\'e9\
    download(from: url) \{ data in\
        let user = try! JSONDecoder().decode(User.self, from:data)\
        completion(user)\
    \}\
\}\
\
fetchUser(for: 123) \{ user in\
    print(user.name)\
\}\
\cb1 \
\
\
async\'82\'c9\'82\'e6\'82\'e9\'94\'f1\'93\'af\'8a\'fa\'94\'c5\
\cb2 // \'83\'54\'81\'5b\'83\'6f\'81\'5b\'82\'a9\'82\'e7 JSON \'82\'f0\'8e\'e6\'93\'be\'82\'b5\'81\'41\
// User \'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'83\'66\'83\'52\'81\'5b\'83\'68\'82\'b7\'82\'e9\
// \'94\'f1\'93\'af\'8a\'fa\'8a\'d6\'90\'94 fetchUser \'82\'f0\'8a\'ae\'90\'ac\'82\'b3\'82\'b9\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
//\
// \'83\'54\'81\'5b\'83\'6f\'81\'5b\'82\'a9\'82\'e7 JSON \'82\'f0\'8e\'e6\'93\'be\'82\'b7\'82\'e9\'82\'c9\'82\'cd\
// download \'8a\'d6\'90\'94\'82\'f0\'97\'70\'82\'a2\'82\'dc\'82\'b7\'81\'42\
// download \'82\'cc\'8e\'c0\'91\'95\'82\'cd\'8b\'5b\'8e\'97\'93\'49\'82\'c8\'82\'e0\'82\'cc\'82\'c5\'82\'b7\'82\'aa\
// \'95\'cf\'8d\'58\'82\'b9\'82\'b8\'82\'c9\'82\'bb\'82\'cc\'82\'dc\'82\'dc\'97\'98\'97\'70\'82\'b5\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
//\
// \'82\'c8\'82\'a8\'81\'41\'92\'ca\'90\'4d\'82\'e2\'83\'66\'83\'52\'81\'5b\'83\'68\'82\'c9\'8b\'4e\'88\'f6\'82\'b7\'82\'e9\'83\'47\'83\'89\'81\'5b\'82\'cd\
// \'8b\'4e\'82\'b1\'82\'e7\'82\'c8\'82\'a2\'82\'e0\'82\'cc\'82\'c6\'82\'b5\'82\'dc\'82\'b7\'81\'42\
\
import Foundation\
import FoundationNetworking\
\
struct User: Identifiable, Codable \{\
    typealias ID = Int\
    let id: ID\
    var name: String\
    var thumbnailURL: URL\
\}\
func download(from url: URL) async -> Data \{\
    let data: Data = try! Data(contentsOf: url)\
    return data\
\}\
\
func fetchUser(for id: User.ID) async -> User \{\
    let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/user?id=\\(id.description)")!\
    // 
\f3 \uc0\u55357 \u56999 
\f1  \'82\'b1\'82\'b1\'82\'f0\'8e\'c0\'91\'95\'82\'b7\'82\'e9\
    \
    let data = await download(from: url)\
    let user = try! JSONDecoder().decode(User.self, from:data)\
    return user\
\}\
\
// func foo() \{\
//     var a:() async -> Int = \{42\}\
//     // var b:() -> Int = \{42\}\
//     // a = b// \'82\'b1\'82\'ea\'82\'cd\'82\'c8\'82\'f1\'82\'a9sync\'82\'aaasync\'82\'cc\'83\'54\'83\'75\'83\'5e\'83\'43\'83\'76\'82\'c5\'82\'a0\'82\'e9\'82\'b1\'82\'c6\'82\'f0\'83\'52\'83\'93\'83\'70\'83\'43\'83\'8b\'82\'aa\'92\'ca\'82\'e9\'82\'a9\'82\'e7\'8f\'d8\'96\'be\'82\'c5\'82\'ab\'82\'c4\'82\'e9\'82\'cb\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'97\'e1\'81\'42\'8b\'74 b = a\'82\'cd\'83\'52\'83\'93\'83\'70\'83\'43\'83\'8b\'83\'47\'83\'89\'81\'5b\'81\'42\
    \
//     var c = await a()\
//     print(c)\
// \}\
\
runAsyncAndBlock \{\
    // foo()\
    let user = await fetchUser(for: 123)\
    print(user.name)\
\}\
\cb1 \
\
\
\
\'83\'47\'83\'89\'81\'5b\'82\'aa\'8b\'4e\'82\'b1\'82\'e8\'93\'be\'82\'e9\'8f\'ea\'8d\'87\
\cb2 func download(from url: URL) 
\f0\b async throws
\f1\b0  -> Data \
\
do \{\
	let data = 
\f0\b try await 
\f1\b0 download(from: url)\
	// \'82\'b1\'82\'b1\'82\'c5data\'82\'f0\'8e\'67\'82\'a4\
\} catch \{\
	// \'82\'b1\'82\'b1\'82\'c5\'83\'47\'83\'89\'81\'5b\'8f\'88\'97\'9d\'82\'f0\'8d\'73\'82\'a4\
\}\
\cb1 \
\'90\'e6\'82\'c9await\'82\'aa\'8d\'73\'82\'ed\'82\'ea\'82\'c4try\'82\'aa\'8d\'73\'82\'ed\'82\'ea\'82\'e9\'82\'cc\'82\'c5\'81\'41\'83\'4c\'81\'5b\'83\'8f\'81\'5b\'83\'68\'82\'cdasync throws \'82\'c6\'82\'a2\'82\'a4\'8f\'87\'94\'d4\'82\'c9\'82\'c8\'82\'e9\'81\'42\'82\'b1\'82\'ea\'82\'cd\'8c\'c5\'92\'e8\'81\'42\
\
\'82\'df\'82\'bf\'82\'e1\'82\'ad\'82\'bf\'82\'e1\'8d\'87\'97\'9d\'93\'49\'81\'42\
\
catch\'82\'f0\'8d\'87\'90\'ac\'82\'c5\'82\'ab\'82\'e9 -> \'95\'a1\'90\'94\'82\'cc\'83\'47\'83\'89\'81\'5b\'82\'f0\'93\'af\'82\'b6catch\'82\'c5\'88\'b5\'82\'a6\'82\'e9 / \'88\'b5\'82\'ed\'82\'c8\'82\'a2\'82\'c6\'82\'a2\'82\'af\'82\'c8\'82\'ad\'82\'c8\'82\'e9\'82\'cc\'82\'c5\'81\'41\'82\'a4\'81\'5b\'82\'f1\'88\'ea\'92\'b7\'88\'ea\'92\'5a\
\
\'83\'6c\'83\'58\'83\'67\'82\'aa\'89\'f0\'8f\'c1\'82\'c5\'82\'ab\'82\'e9 + \'83\'47\'83\'89\'81\'5b\'83\'6e\'83\'93\'83\'68\'83\'8a\'83\'93\'83\'4f\'82\'aa\'8e\'fb\'91\'a9\'82\'b3\'82\'ea\'82\'e9\
	pros-cons\'82\'a0\'82\'e9\'82\'af\'82\'c7\'94\'e4\'8a\'72\'82\'b5\'82\'c3\'82\'e7\'82\'a2\'82\'c8\'81\'5b\'81\'42\
\
\
\
\
\'95\'c0\'8d\'73\'8f\'88\'97\'9d\'82\'f0\'82\'c7\'82\'a4\'82\'b7\'82\'ea\'82\'ce\'82\'a2\'82\'a2\'82\'a9\
	\'95\'a1\'90\'94\'82\'ccgo \'8a\'d6\'90\'94\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'82\'e2\'82\'c2\
\
\'8a\'d6\'90\'94a\'82\'c6b\'82\'f0\'95\'c0\'8d\'73\'82\'c9\'8e\'c0\'8d\'73\'82\'b5\'82\'bd\'82\'a2 = \'93\'af\'8e\'9e\'82\'c9\'91\'d2\'82\'bf\'82\'bd\'82\'a2\'81\'41\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'83\'50\'81\'5b\'83\'58\'82\'f0\'82\'c7\'82\'a4\'82\'b7\'82\'e9\'82\'a9\
\
async let a = foo()// await\'82\'f0\'82\'c2\'82\'af\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'c8\'82\'a2\
async let b = bar()// await\'82\'f0\'82\'c2\'82\'af\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'c8\'82\'a2\
\
print(await a + b)// \'82\'dc\'82\'c6\'82\'df\'82\'c4await\'82\'b7\'82\'e9\
\
	JS\'82\'cc\'8f\'ea\'8d\'87\'82\'cd\'81\'41async\'82\'c8\'8a\'d6\'90\'94\'82\'cd\'95\'4b\'82\'b8promise\'82\'f0\'95\'d4\'82\'b5\'82\'c4\'82\'ad\'82\'e9\'82\'cc\'82\'c5\'81\'41\'8c\'c2\'81\'58\'82\'c9await\'82\'c5\'94\'8d\'82\'aa\'82\'b7\'8c\'60\'82\'c9\'82\'c8\'82\'e9\'81\'42\
	print(await a + await b)\'82\'c6\'82\'a9\'82\'c9\'82\'c8\'82\'e9\'81\'42\
\
\
JS\'82\'cc\'8f\'ea\'8d\'87\'82\'cdpromise\'8c\'5e\'82\'f0\'95\'d4\'82\'b7\'82\'cc\'82\'c5\'81\'41promise\'8c\'5e\'82\'f0\'98\'49\'8f\'6f\'82\'b3\'82\'b9\'82\'e9\'82\'b1\'82\'c6\'82\'aa\'82\'c5\'82\'ab\'82\'c4\'82\'b5\'82\'dc\'82\'a4\'82\'aa\'81\'41\
swift\'82\'cc\'8f\'ea\'8d\'87\'82\'cd\'82\'bb\'82\'a4\'82\'a2\'82\'a4\'82\'b1\'82\'c6\'82\'aa\'8b\'4e\'82\'ab\'82\'c8\'82\'a2\'82\'bd\'82\'df\'81\'41promise\'89\'98\'90\'f5\'82\'aa\'8b\'4e\'82\'b1\'82\'b9\'82\'c8\'82\'a2\'81\'42\'82\'a2\'82\'a2\'98\'62\'81\'42\
\
\
\
structured concurrency \'82\'c6\'82\'a2\'82\'a4\'83\'52\'83\'93\'83\'5a\'83\'76\'83\'67\'82\'c9\'8a\'ee\'82\'c3\'82\'a2\'82\'c4\'8d\'ec\'82\'e7\'82\'ea\'82\'c4\'82\'c4\'81\'41Kotlin\'82\'c9\'8e\'67\'82\'ed\'82\'ea\'82\'c4\'82\'a2\'82\'e9\'81\'42\
swift\'82\'e0\'82\'b1\'82\'ea\'82\'f0\'8d\'cc\'97\'70\'81\'42\
	-> \'82\'b1\'82\'ea\'82\'f0\'92\'c7\'82\'a4\'82\'c6\'96\'ca\'94\'92\'82\'bb\'82\'a4\'81\'42\
\
\
\
task.withgroup\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'82\'cc\'82\'e0\'82\'a0\'82\'e9\'82\'e7\'82\'b5\'82\'a2\'81\'42async let\'82\'c5\'8f\'91\'82\'af\'82\'e9\'94\'cd\'88\'cd\'82\'c8\'82\'e7\'82\'bb\'82\'ea\'82\'c5\'8f\'91\'82\'ad\'82\'c6\'82\'b7\'82\'b2\'82\'ad\'8a\'79\
\'82\'bd\'82\'be\'82\'b5\'90\'e9\'8c\'be\'93\'49\'82\'c8\'82\'cc\'82\'c5\'81\'41\'89\'c2\'95\'cf\'90\'ab\'82\'f0\'8e\'9d\'82\'bd\'82\'b9\'82\'e9\'82\'e6\'82\'a4\'82\'c8\'8f\'91\'82\'ab\'95\'fb\'82\'cd\'82\'c5\'82\'ab\'82\'c8\'82\'a2\'81\'42\
\
\
\'93\'af\'8e\'9e\'82\'c9\'91\'96\'82\'e7\'82\'b9\'82\'e9ver\
\cb2 // \'83\'54\'81\'5b\'83\'6f\'81\'5b\'82\'a9\'82\'e7 User \'82\'c6\'82\'bb\'82\'cc Article \'8d\'c5\'90\'56 10 \'8c\'8f\'82\'cc JSON \'82\'f0\'8e\'e6\'93\'be\'82\'b5\'81\'41\
// \'82\'bb\'82\'ea\'82\'e7\'82\'f0\'95\'d4\'82\'b7\'94\'f1\'93\'af\'8a\'fa\'8a\'d6\'90\'94 fetchUserWithArticles \'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
// \'82\'bd\'82\'be\'82\'b5\'81\'41 User \'82\'c6 Article \'82\'cc JSON \'82\'cd\'95\'c0\'8d\'73\'82\'b5\'82\'c4\'8e\'e6\'93\'be\'82\'b7\'82\'e9\'82\'e0\'82\'cc\'82\'c6\'82\'b5\'81\'41\
// User \'82\'c6 Artcile \'82\'cc\'8e\'e6\'93\'be\'82\'c9\'82\'cd fetchUser \'82\'a8\'82\'e6\'82\'d1\
// fetchArticles \'82\'f0\'97\'70\'82\'a2\'82\'e9\'82\'e0\'82\'cc\'82\'c6\'82\'b5\'82\'dc\'82\'b7\'81\'42\
\
import Foundation\
import FoundationNetworking\
\
struct User: Identifiable, Codable \{\
    typealias ID = Int\
    let id: ID\
    var name: String\
    var thumbnailURL: URL\
\}\
struct Article: Identifiable, Codable \{\
    typealias ID = Int\
    let id: ID\
    var title: String\
\}\
func fetchUser(for id: User.ID) async throws -> User \{\
    let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/user?id=\\(id.description)")!\
    let data: Data = try Data(contentsOf: url)\
    let user: User = try JSONDecoder().decode(User.self, from: data)\
    return user\
\}\
func fetchArticles(for userID: User.ID, limit: Int) async throws -> [Article] \{\
    let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/articles?userID=\\(userID.description)")!\
    let data: Data = try Data(contentsOf: url)\
    let articles: [Article] = try JSONDecoder().decode([Article].self, from: data)\
    return articles\
\}\
\
func fetchUserWithArticles(for id: User.ID, limit: Int) async throws -> (user: User, articles: [Article]) \{\
    // 
\f3 \uc0\u55357 \u56999 
\f1  \'82\'b1\'82\'b1\'82\'f0\'8e\'c0\'91\'95\'82\'b7\'82\'e9\
    \
    async let user =  fetchUser(for:id)// \'82\'b1\'82\'b1\'82\'c9await\'82\'f0\'82\'c2\'82\'af\'82\'e9\'82\'c6\'91\'e3\'93\'fc\'91\'4f\'82\'c9fetchUser\'82\'aa\'8f\'49\'82\'ed\'82\'e9\'81\'41\'82\'c8\'82\'e9\'82\'d9\'82\'c7\
    async let articles =  fetchArticles(for: id, limit:limit)\
    \
    let result = try await(user, articles)// \'82\'b1\'82\'b1\'82\'c5\'82\'dc\'82\'c6\'82\'df\'82\'c4await\'82\'c5\'94\'8d\'82\'aa\'82\'b5\'82\'c4\'81\'41\
    return result\
\}\
\
// \'82\'bb\'82\'cc\'82\'dc\'82\'dc\'83\'67\'83\'62\'83\'76\'83\'8c\'83\'78\'83\'8b\'82\'c9\'82\'cd\'8f\'91\'82\'af\'82\'c8\'82\'a2\'81\'42runAsyncAndBlock\'82\'f0\'8e\'67\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'81\'42\
runAsyncAndBlock \{\
    do \{\
        let (user, articles) = try await fetchUserWithArticles(for: 123, limit: 10)\
        print(user, articles)\
    \} catch \{\
        print(error)\
    \}\
\}\
\cb1 \
\
\cb2 @asyncHandler\
func bar() \{\
	print(2)\
	await foo1()\
	print(4)\
	await foo2()\
	print(5)\
\}\
\
print(1)\
bar()\
print(3)\
\cb1 \
\'82\'b1\'82\'ea\'82\'cd1,2,3,4,5\'82\'f0\'8f\'6f\'97\'cd\'82\'b7\'82\'e9\
\
async\'82\'f0\'82\'c2\'82\'af\'82\'e9\'82\'c6\'82\'b1\'82\'a4\'82\'c8\'82\'e9\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb3 func bar() async \{\
	print(2)\
	await foo1()\
	print(3)\
	await foo2()\
	print(4)\
\}\
\
print(1)\
await bar()\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb2 print(5)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \cb1 \
1,2,3,4,5\'82\'f0\'8f\'6f\'97\'cd\'82\'b7\'82\'e9\'81\'42\
\
\
\
\
async\'82\'cc\'8d\'aa\'82\'c1\'82\'b1\'82\'c9\'82\'c8\'82\'ea\'82\'e9\'82\'e0\'82\'cc\'82\'aa4\'82\'c2\'82\'a0\'82\'e9\
	\'83\'67\'83\'62\'83\'76\'83\'8c\'83\'78\'83\'8b\
	@main\
	@asyncHandler\
	Task.runDetached\
	(runAsyncAndBlock)// \'83\'67\'83\'62\'83\'76\'83\'8c\'83\'78\'83\'8b\'82\'c5\'8f\'91\'82\'af\'82\'e9\'82\'e6\'82\'a4\'82\'c9\'82\'c8\'82\'e9\'82\'dc\'82\'c5\'82\'cc\'8e\'62\'92\'e8\'93\'49\'82\'c8\'8e\'e8\'92\'69\'82\'aa\'97\'70\'88\'d3\'82\'b3\'82\'ea\'82\'c4\'82\'e9\'82\'f1\'82\'be\'82\'c1\'82\'c4\'82\'b3\'81\'42\
\'82\'b1\'82\'ea\'82\'e7\'82\'f0\'97\'98\'97\'70\'82\'b5\'82\'c4\'96\'b3\'8c\'c0async\'89\'98\'90\'f5\'96\'e2\'91\'e8\'82\'c9\'91\'ce\'8f\'88\'82\'aa\'82\'c5\'82\'ab\'82\'e9\'81\'42\
\
\cb2 // ViewController \'82\'cc reloadUserButton \'82\'aa\'89\'9f\'82\'b3\'82\'ea\'82\'bd\'82\'c6\'82\'ab\'82\'c9\
// fetchUser \'8a\'d6\'90\'94\'82\'f0\'8e\'67\'82\'c1\'82\'c4\'83\'54\'81\'5b\'83\'6f\'81\'5b\'82\'a9\'82\'e7 User \'82\'f0\'8e\'e6\'93\'be\'82\'b5\'81\'41\
// userNameLabel.text \'82\'c9\'8e\'e6\'93\'be\'82\'b5\'82\'bd\'83\'86\'81\'5b\'83\'55\'81\'5b\'82\'cc name \'82\'f0\'90\'dd\'92\'e8\'82\'b7\'82\'e9\'82\'e6\'82\'a4\'82\'c9\
// onReloadUserButtonPressed \'83\'81\'83\'5c\'83\'62\'83\'68\'82\'f0\'8a\'ae\'90\'ac\'82\'b3\'82\'b9\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
\
import Foundation\
import FoundationNetworking\
\
class UIViewController \{\}\
final class UIButton \{\}\
final class UILabel \{\
    var text: String?\
\}\
\
struct User: Identifiable, Codable \{\
    typealias ID = Int\
    let id: ID\
    var name: String\
    var thumbnailURL: URL\
\}\
func fetchUser(for id: User.ID) async throws -> User \{\
    let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/user?id=\\(id.description)")!\
    let data: Data = try Data(contentsOf: url)\
    let user: User = try JSONDecoder().decode(User.self, from: data)\
    return user\
\}\
\
final class ViewController: UIViewController \{\
    let reloadUserButton: UIButton = .init()\
    let userNameLabel: UILabel = .init()\
    let userID: User.ID = 123\
\
    // 
\f3 \uc0\u55357 \u56999 
\f1  \'82\'b1\'82\'cc\'83\'81\'83\'5c\'83\'62\'83\'68\'82\'f0\'8a\'ae\'90\'ac\'82\'b3\'82\'b9\'82\'e9\
    @asyncHandler\
    func onReloadUserButtonPressed(_ sender: UIButton) \{\
        if let user = try? await fetchUser(for: userID) \{// \'82\'b1\'82\'cc\'8a\'d6\'90\'94\'82\'c9async\'82\'aa\'82\'c2\'82\'a2\'82\'c4\'82\'c8\'82\'a2\'82\'af\'82\'c7@asyncHandler\'82\'aa\'82\'a0\'82\'e9\'82\'cc\'82\'c5await\'82\'aa\'8f\'91\'82\'af\'82\'e9\
        \
            userNameLabel.text = user.name\
        \}\
    \}\
\}\
\
let viewController: ViewController = .init()\
viewController.onReloadUserButtonPressed(viewController.reloadUserButton)\
\cb1 \
\'95\'ca\'83\'58\'83\'8c\'83\'62\'83\'68\'8e\'c0\'8d\'73\'82\'cc\'8b\'4e\'93\'5f\'82\'c9\'82\'c8\'82\'e9\'82\'be\'82\'af\'82\'c8\'82\'cc\'82\'c5\'81\'41\'83\'58\'83\'67\'83\'62\'83\'76\'82\'b9\'82\'b8\'82\'c9\'8e\'c0\'8d\'73\'82\'b3\'82\'ea\'82\'e9\'81\'42\
\
\
Task\'82\'cdasync\'8a\'d6\'90\'94\'82\'c9\'82\'c6\'82\'c1\'82\'c4\'82\'cc\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'cc\'82\'e6\'82\'a4\'82\'c8\'95\'a8\'82\'c5\'81\'41\
async\'8a\'d6\'90\'94\'82\'cc\'92\'86\'82\'c5await\'82\'a9\'82\'e7\'8b\'41\'82\'c1\'82\'c4\'82\'ab\'82\'bd\'82\'e7\'95\'ca\'82\'cc\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'c9\'82\'c8\'82\'e9\'82\'aa\'81\'41Task\'82\'c6\'82\'a2\'82\'a4\'8a\'54\'94\'4f\'82\'cd\'8c\'70\'91\'b1\'82\'b5\'82\'c4\'93\'af\'82\'b6\'82\'e0\'82\'cc\'82\'aa\'8e\'67\'82\'ed\'82\'ea\'82\'e9\'81\'42\
\
async1\'82\'c2\'82\'c9\'91\'ce\'82\'b5\'82\'c4Task1\'82\'c2\'82\'aa\'8c\'70\'91\'b1\'90\'ab\'82\'f0\'88\'db\'8e\'9d\'82\'b7\'82\'e9\'82\'bd\'82\'df\'82\'c9\'90\'b6\'90\'ac\'82\'b3\'82\'ea\'82\'e9\'82\'e6\'82\'a4\'82\'c8\'83\'43\'83\'81\'81\'5b\'83\'57\'81\'42\
\
\'82\'c5\'81\'41async let\'82\'b7\'82\'e9\'82\'c6\'81\'41\'82\'bb\'82\'cc\'8e\'c0\'8d\'73\'82\'cdchild task\'82\'aa\'90\'b6\'90\'ac\'82\'b3\'82\'ea\'82\'c4\'8e\'c0\'8d\'73\'82\'b3\'82\'ea\'82\'e9\'81\'42\
\'82\'c5\'81\'41runDetached\'8a\'d6\'90\'94\'82\'cd.cancel()\'8a\'d6\'90\'94\'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'82\'a2\'82\'e9\'82\'cc\'82\'c5\'81\'41\'8f\'e3\'88\'ca\'82\'a9\'82\'e7\'8a\'db\'82\'b2\'82\'c6\'83\'4c\'83\'83\'83\'93\'83\'5a\'83\'8b\'82\'aa\'82\'c5\'82\'ab\'82\'e9\'81\'42\
\
\'82\'a4\'81\'5b\'82\'f1\'82\'b1\'82\'ea\'82\'cd\'95\'d6\'97\'98\'81\'42go\'82\'cccontext\'82\'be\'81\'42kotlin\'82\'c5\'82\'e0\'82\'c5\'82\'ab\'82\'e9\'82\'f1\'82\'be\'82\'eb\'82\'a4\'82\'a9?\'82\'c6\'82\'cc\'82\'b1\'82\'c6\
\
\cb2 // ViewController \'82\'cc cancelReloadingUser \'83\'7b\'83\'5e\'83\'93\'82\'f0\'89\'9f\'82\'b7\'82\'c6\
// reloadUser \'83\'7b\'83\'5e\'83\'93\'82\'c5\'8e\'c0\'8d\'73\'82\'b3\'82\'ea\'82\'c4\'82\'a2\'82\'e9 User \'82\'cc\'83\'8a\'83\'8d\'81\'5b\'83\'68\'82\'f0\
// \'83\'4c\'83\'83\'83\'93\'83\'5a\'83\'8b\'82\'b7\'82\'e9\'82\'e6\'82\'a4\'82\'c9 ViewController \'82\'cc\'8e\'c0\'91\'95\'82\'f0\'8a\'ae\'90\'ac\'82\'b3\'82\'b9\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
\
import Foundation\
import FoundationNetworking\
\
class UIViewController \{\}\
final class UIButton \{\}\
final class UILabel \{\
    var text: String?\
\}\
\
struct User: Identifiable, Codable \{\
    typealias ID = Int\
    let id: ID\
    var name: String\
    var thumbnailURL: URL\
\}\
\
func fetchUser(for id: User.ID) async throws -> User \{\
    let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/user?id=\\(id.description)")!\
    let data: Data = try Data(contentsOf: url)\
    let user: User = try JSONDecoder().decode(User.self, from: data)\
    return user\
\}\
\
// 
\f3 \uc0\u55357 \u56999 
\f1  \'82\'b1\'82\'cc\'83\'4e\'83\'89\'83\'58\'82\'f0\'8a\'ae\'90\'ac\'82\'b3\'82\'b9\'82\'e9\
final class ViewController: UIViewController \{\
    let reloadUserButton: UIButton = .init()\
    let cancelReloadingUserButton: UIButton = .init()\
    let userNameLabel: UILabel = .init()\
    var handle:Task.Handle<Void>?\
    \
    func onReloadUserButtonPressed(_ sender: UIButton) \{\
        handle = Task.runDetached \{ [self] in\
            if let user = try? await fetchUser(for: 123) \{\
                userNameLabel.text = user.name\
            \}\
        \}\
    \}\
\
    func onCancelReloadingUserButtonPressed(_ sender: UIButton) \{\
        handle?.cancel()\
    \}\
\}\
\
let viewController: ViewController = .init()\
viewController.onReloadUserButtonPressed(viewController.reloadUserButton)\
viewController.onCancelReloadingUserButtonPressed(viewController.cancelReloadingUserButton)\
\cb1 \
\
\'83\'81\'83\'82\
	callback -> \'8a\'d6\'90\'94\'82\'f0\'8c\'c4\'82\'d1\'8f\'6f\'82\'b5\'82\'bd\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'c5\
	dispatchqueue.async() \'82\'c5\'82\'c7\'82\'b1\'82\'a9\'82\'c9\'93\'8a\'82\'b0\'8d\'9e\'82\'de\
\
	\'81\'45task\'82\'aaexecutor\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'82\'cc\'82\'f0\'8e\'9d\'82\'c4\'82\'e9\'82\'e6\'82\'a4\'82\'c9\'82\'c8\'82\'c1\'82\'c4\'82\'e9\
	\'81\'45await\'82\'a9\'82\'e7\'96\'df\'82\'c1\'82\'c4\'82\'ab\'82\'bd\'8e\'9e\'82\'c9continuation\'82\'b7\'82\'e9\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'f0\'82\'c7\'82\'a4\'82\'b7\'82\'e9\'82\'a9\'82\'dd\'82\'bd\'82\'a2\'82\'c8\'82\'cc\'82\'cdexecutor\'82\'cc\'90\'d3\'96\'b1\'82\'c9\'82\'c8\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'81\'42\
	\'81\'45\'82\'c7\'82\'cc\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'c9\'96\'df\'82\'e9\'82\'a9\'82\'f0\'90\'dd\'92\'e8\'82\'b7\'82\'e9\'82\'b1\'82\'c6\'82\'aa\'82\'c5\'82\'ab\'82\'e9\
 \
	actor\'82\'dc\'82\'ed\'82\'e8\'82\'c6\'8a\'d6\'98\'41\'82\'b5\'82\'c4\'82\'e9\'82\'e7\'82\'b5\'82\'a2\'81\'41\'81\'41\'82\'ed\'82\'a9\'82\'f1\'82\'cb\'81\'42\
	actor\'82\'cd\'8e\'a9\'90\'67\'82\'cc\'83\'81\'83\'5c\'83\'62\'83\'68\'82\'aa\'95\'4b\'82\'b8\'82\'bb\'82\'b1\'82\'c5\'92\'bc\'97\'f1\'89\'bb\'82\'b3\'82\'ea\'82\'e9\'81\'48\
\
\
\'8a\'d6\'90\'94\'82\'f0async\'89\'bb\'82\'b5\'82\'c4\'82\'dd\'82\'e6\'82\'a4\
func foo(completion: @escaping) ~ \'82\'dd\'82\'bd\'82\'a2\'82\'c8\'82\'cc\'82\'aa\'82\'a0\'82\'c1\'82\'bd\'8e\'9e\'82\'c9\'81\'41\
\
withUnsafeContinuation \{ continuation in \'82\'f0\'8e\'67\'82\'c1\'82\'c4\
	foo \{\
		continuation.resume(returning: value)\
	\}\
\}\
\
unsafe\'82\'c6checked\'82\'aa\'82\'a0\'82\'e9\'81\'42checked\'82\'f0\'82\'c2\'82\'af\'82\'e9\'82\'c6continuation.resume\'82\'cc\'8c\'c4\'82\'d1\'96\'59\'82\'ea\'82\'f0\'83\'47\'83\'89\'81\'5b\'82\'c9\'82\'c5\'82\'ab\'82\'e9\'81\'42\
\'93\'96\'91\'52checked\'82\'cc\'82\'d9\'82\'a4\'82\'aa\'82\'a2\'82\'eb\'82\'f1\'82\'c8\'83\'52\'83\'58\'83\'67\'82\'aa\'82\'a0\'82\'e9\'82\'c6\'82\'cc\'82\'b1\'82\'c6\'81\'42\
\
\'83\'52\'81\'5b\'83\'8b\'83\'6f\'83\'62\'83\'4e\'8a\'d6\'90\'94\'82\'f0async\'82\'c5\'83\'89\'83\'62\'83\'76\'82\'b5\'82\'c4async\'89\'bb\'82\'b5\'82\'e6\'82\'a4\
\cb2 // \'83\'52\'81\'5b\'83\'8b\'83\'6f\'83\'62\'83\'4e\'82\'c5\'8c\'8b\'89\'ca\'82\'f0\'8e\'f3\'82\'af\'8e\'e6\'82\'e9\'94\'f1\'93\'af\'8a\'fa\'8a\'d6\'90\'94 download \'82\'f0\'8e\'67\'82\'c1\'82\'c4\'81\'41\
// async \'82\'c5\'8c\'8b\'89\'ca\'82\'f0\'95\'d4\'82\'b7\'94\'f1\'93\'af\'8a\'fa\'8a\'d6\'90\'94 download \'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'89\'ba\'82\'b3\'82\'a2\'81\'42\
\
import Foundation\
import FoundationNetworking\
\
func download(from url: URL, completion: @escaping (Result<Data, Error>) -> Void) \{\
    do \{\
        let data: Data = try Data(contentsOf: url)\
        completion(.success(data))\
    \} catch \{\
        completion(.failure(error))\
    \}\
\}\
\
// 
\f3 \uc0\u55357 \u56999 
\f1  \'82\'b1\'82\'b1\'82\'f0\'8e\'c0\'91\'95\'82\'b7\'82\'e9\
func download(from url: URL) async throws -> Data \{\
    try await withUnsafeThrowingContinuation \{ continuation in\
        download(from: url) \{ result in \
            continuation.resume(with: result)\
        \}\
    \}\
\}\
\
runAsyncAndBlock \{\
    do \{\
        let url: URL = URL(string: "https://koherent.org/async-await-challenge/api/user?id=123")!\
        let data: Data = try await download(from: url)\
        print(String(data: data, encoding: .utf8)!)\
    \} catch \{\
        print(error)\
    \}\
\}\
\cb1 \
\
\'96\'df\'82\'e8\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'c6\'82\'a9\'82\'cd\'82\'c7\'82\'a4\'82\'c8\'82\'c1\'82\'bf\'82\'e1\'82\'a4\'82\'f1\'82\'be\'82\'eb\'82\'a4\
	UI\'83\'58\'83\'8c\'83\'62\'83\'68\'82\'c9\'8e\'77\'92\'e8\'82\'b5\'82\'bd\'82\'a2\'81\'41\'82\'c6\'82\'a9\'82\'cd\'82\'a0\'82\'e8\'82\'bb\'82\'a4\'82\'be\'82\'af\'82\'c7\'81\'41\'82\'bb\'82\'ea\'82\'cd\'82\'c7\'82\'a4\'82\'e2\'82\'e9\'82\'f1\'82\'be\'82\'eb\'82\'a4\'81\'42\
	-> GDC\'82\'c5\'82\'cd\'82\'a2\'81\'42\'82\'dc\'82\'a0\'82\'a0\'82\'ea\'83\'58\'83\'62\'83\'51\'81\'5b\'95\'d6\'97\'98\'82\'be\'82\'e0\'82\'f1\'82\'c8\
\
\
\
}