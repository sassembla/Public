<!DOCTYPE PUBLIC "/W3/DTD HTML 4.0/EN" "http/www.w3.orstrict.dtd">
>
<head>
  <meta http-equiv="Content-Type" content="te; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="texcss">
  <title>title>
  <meta name="Generator" content="rtfd handling Cocoa HTML Writer">
  <meta name="CocoaVersion" content="1138.23">
  <style type="texcss">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 22.0px 'Hiragino Kaku Gothic ProN'}
    p.p2 {margin: 0.0px 0.0px 12.0px 0.0px; font: 14.0px 'Hiragino Kaku Gothic ProN'}
    p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'Hiragino Kaku Gothic ProN'}
    p.p4 {margin: 0.0px 0.0px 12.0px 0.0px; font: 14.0px 'Hiragino Kaku Gothic ProN'; min-height: 21.0px}
    p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'Hiragino Kaku Gothic ProN'; min-height: 21.0px}
    p.p6 {margin: 0.0px 0.0px 12.0px 0.0px; font: 19.0px 'Hiragino Kaku Gothic ProN'; min-height: 29.0px}
    p.p7 {margin: 0.0px 0.0px 12.0px 0.0px; font: 14.0px 'Hiragino Kaku Gothic ProN'; color: #1400c0}
    p.p8 {margin: 0.0px 0.0px 12.0px 0.0px; font: 14.0px 'Hiragino Kaku Gothic ProN'; color: #407f5e}
    p.p9 {margin: 0.0px 0.0px 0.0px 0.0px; font: 19.0px 'Hiragino Kaku Gothic ProN'; min-height: 29.0px}
    p.p10 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica,Arial}
    p.p11 {margin: 0.0px 0.0px 12.0px 0.0px; font: 22.0px 'Hiragino Kaku Gothic ProN'}
    p.p12 {margin: 0.0px 0.0px 12.0px 0.0px; font: 19.0px 'Hiragino Kaku Gothic ProN'}
    span.s1 {color: #7f0055}
    span.s2 {color: #1400c0}
    span.s3 {color: #2a02ff}
    span.s4 {color: #000000}
    span.s5 {font: 12.0px Helvetica,Arial}
    span.s6 {font: 14.0px 'Hiragino Kaku Gothic ProN'}
    span.Apple-tab-span {white-space:pre}
  style>
head>
<body>
<p class="p1"><b>GWTとDartでMessagingb>p>
<p class="p2"><b>メッセージングとはb>p>
<p class="p3"><span class="Apple-converted-space">  span>本来の定義とは違いますが、p>
<p class="p3"><span class="Apple-converted-space">  span>ここでは、"オブジェクト間の参照渡しなしで、相互に呼び合うことができる機構"として使っています。p>
<p class="p3"><span class="Apple-converted-space">  span>なにそれ凄い!! って思った方、居たら嬉しいです。p>
<p class="p3"><span class="Apple-converted-space">  span>言語的には、p>
<p class="p3"><span class="Apple-converted-space">     span>関数型言語、一部のオブジェクト指向言語で仕様として用意されています。p>
<p class="p2">Scalaとか、<br>
Objective-Cとか。<span class="Apple-converted-space"> span>p>
<p class="p4"><b>b><br>p>
<p class="p2"><b>GWTでメッセージングb>p>
<p class="p3"><span class="Apple-converted-space">  span>インストールとp>
<p class="p3"><span class="Apple-converted-space">  span>サンプル実行とp>
<p class="p3"><span class="Apple-converted-space">  span>メッセージングをやってみよう的な。p>
<p class="p5"><b>b><br>p>
<p class="p5"><b>b><br>p>
<p class="p2"><b>ダウンロード このへんb>p>
<p class="p2"><b><span class="Apple-tab-span">	span>b>https/gitorious.ormessengersystem-gwt#morep>
<p class="p2"><span class="Apple-tab-span">	span>DLして→importして、、って、コレからサクッとやってみます。<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span>ScreenCastにあるので、まあ解説がてら。p>
<p class="p2"><span class="Apple-tab-span">	span>git clone git@gitorious.org:messengersystem-gwmessengersystem-gwt.gitp>
<p class="p2"><span class="Apple-tab-span">	span>→Eclipseのプロジェクトなので、Eclipseにimportp>
<p class="p6"><b>b><br>p>
<p class="p2"><b>実行<br>
b><span class="Apple-tab-span">	span>各インスタンスからWindow.alertがでますた。 インスタンスは保持してますが、メソッドは実行していない点に注目。p>
<p class="p2"><span class="Apple-tab-span">	span>GWTMessengerでのメッセージング JSのWindow.postMessageを使い、インスタンス間のポインタ手動ではない構造を作ってます。p>
<p class="p2"><span class="Apple-tab-span">	span/何かしらオブジェクトを作りますp>
<p class="p2"><span class="Apple-tab-span">	span>Foo foo = <span class="s1">new span>Foo("A");p>
<p class="p2"><span class="Apple-tab-span">	span>Foo foo2 = <span class="s1">new span>Foo("B");p>
<p class="p2"><span class="Apple-tab-span">	span>&gt;&gt;<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span/オブジェクトの中に、メッセージの受け手兼送り手のMessngerGWTImplementsを書いときます。<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span><span class="s2">messenger span>= <span class="s1">new span>MessengerGWTImplement(name, <span class="s1">this);span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span/メッセージを送り合う関係を形成するように、(既にここからメッセージングで)親居ますか?ってメッセージを<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span>環境に投げます。この場合は、myselfって名前の人を親として設定します。p>
<p class="p7"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span>messenger.sInputParent("myself");<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="s2"><span class="Apple-tab-span">	span>span>&lt;&lt;p>
<p class="p8"><span class="Apple-tab-span">	span/親設定のオブジェクトmyself から、Aにメッセージを送る <span class="s2">messenger.call("A", span><span class="s3">"fooCommand",span>p>
<p class="p7"><span class="Apple-tab-span">	span>messenger.tagValue("fooString", <span class="s3">"fooValue"), span>messenger.tagValue("fooNumber", <span class="s4">100.0), span>messenger.tagValue("fooObject", <span class="s4">fooObject)span>p>
<p class="p2"><span class="Apple-tab-span">	span>);p>
<p class="p4"><br>p>
<p class="p2"><span class="Apple-tab-span">	span> !とどいた!!p>
<p class="p2"><span class="Apple-tab-span">	span>みたいな。p>
<p class="p6"><br>p>
<p class="p2"><b>Dartでメッセージングb>p>
<p class="p3"><span class="Apple-tab-span">	span>インストールとp>
<p class="p3"><span class="Apple-tab-span">	span>サンプル実行とp>
<p class="p3"><span class="Apple-tab-span">	span>メッセージングをやってみよう的な。p>
<p class="p4"><b><span class="Apple-tab-span">	span>b>p>
<p class="p2"><b>インストール 簡単Verb>p>
<p class="p2"><span class="Apple-tab-span">	span>http/www.dartlang.ordocgetting-starteeditoindex-macosp>
<p class="p4"><b><span class="Apple-tab-span">	span>b>p>
<p class="p2"><b>めんどいVer(Before Oct 2011) 割愛b>p>
<p class="p9"><b>b><br>p>
<p class="p3"><span class="s5"><span class="Apple-tab-span">	span>span>インストールして、"Something"ってプロジェクトを作ってみた。p>
<p class="p10"><img src="impage2image1072.png" alt="page2image1072.png">p>
<p class="p2"><span class="Apple-tab-span">	span>プロジェクトを制作すると、Usersassembldart 直下にフォルダが出来る。p>
<p class="p10"><img src="impage2image2056.png" alt="page2image2056.png">p>
<p class="p2"><span class="Apple-tab-span">	span>サンプルでいい感じなのはコレ DLしたフォルダの中に、すでにサンプルが一式入ってます。 darsamplesp>
<p class="p10"><img src="impage3image504.png" alt="page3image504.png">p>
<p class="p2"><span class="Apple-tab-span">	span>Editorから、 File &gt; Open &gt;darsamplesunflowesunflower.dart dartでは、p>
<p class="p2"><span class="Apple-tab-span">	span>.dartパッケージでアプリケーションの管理ファイルを構成している。 開いて実行するとこんな感じp>
<p class="p10"><img src="impage3image1792.png" alt="page3image1792.png">p>
<p class="p3"><span class="Apple-tab-span">	span>フィボナッチ級数的な感じで、ひまわりが書ける、とか。p>
<p class="p4"><b>b><br>p>
<p class="p2"><b>本題、メッセージング<br>
b><span class="Apple-tab-span">	span>頑張って書いた、、んですが、 今朝見たらsampleにisolateってのがあってさ、、p>
<p class="p11"><span class="s6"><span class="Apple-tab-span">	spanisolate<br>
span><span class="Apple-tab-span">	span>作成日:20119 by Googlep>
<p class="p10"><img src="impage4image504.jpg" alt="page4image504.jpg">p>
<p class="p11">なんやてぇぇぇp>
<p class="p2"><span class="Apple-tab-span">	span>俺のミッション、終了のお知らせ。p>
<p class="p2"><span class="Apple-tab-span">	span>darsampleisolatep>
<p class="p10"><img src="impage4image1744.png" alt="page4image1744.png">p>
<p class="p2"><span class="Apple-tab-span">	span>実行するとp>
<p class="p10"><img src="impage5image488.png" alt="page5image488.png">p>
<p class="p2"><b>中身の解説<span class="Apple-converted-space"> span>b>p>
<p class="p2"><span class="Apple-tab-span">	span>ready()メソッドで、要素を設定してる。p>
<p class="p2"><span class="Apple-tab-span">	span/A,Bのisolate(独立スレッドを持つオブジェクト!)を作る createIsolate("A");<br>
<span class="Apple-tab-span">	span>createIsolate("B");p>
<p class="p2"><span class="Apple-tab-span">	span>createIsolateメソッドの中で、spawn()メソッドを使っています。p>
<p class="p2"><span class="Apple-tab-span">	span>spawnとは、、、!!!<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span>Future&lt;SendPort&gt; spawn() {p>
<p class="p2"><span class="s1"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span>return span>IsolateNatives.spawn(this, _isLight);<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span>}p>
<p class="p6"><br>p>
<p class="p2"><span class="Apple-tab-span">	span>Future型を返す、dart仕様で定義されている(=Runtimeがある)メソッドで、 isolate(独立したオブジェクト = スレッド)を実装します。p>
<p class="p2"><span class="Apple-tab-span">	span>spawn()メソッドの特徴として、 ・実行するとコピーが作成され、コピーがスレッド化するp>
<p class="p2"><span class="Apple-tab-span">	span>(実装見てませんが、たぶんまんまWebWorker作ってます) で、p>
<p class="p4"><br>p>
<p class="p2"><span class="Apple-tab-span">	span/送るp>
<p class="p2"><span class="Apple-tab-span">	span>ports[isolateName].call(message).receive( (var message, SendPort replyTo) {<span class="Apple-converted-space"> span>p>
<p class="p2"><span class="Apple-tab-span">	span><span class="Apple-tab-span">	span>replyElement.text = message;p>
<p class="p2"><span class="Apple-tab-span">	span>});p>
<p class="p6"><br>p>
<p class="p12"><b>おしまいb>p>
body>
html>
